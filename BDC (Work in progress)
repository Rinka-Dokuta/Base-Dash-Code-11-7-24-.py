import pygame
import random
import math
from platforms import Platform
from ball import Ball

#pygame boilerplayer setup
pygame.init()
screen = pygame.display.set_mode((800,600))
pygame.display.set_caption("Base Dash Clone")
clock = pygame.time.Clock() #controls frame rate

#important game variables
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)
DARK = (0, 0, 51)




#Player variables
pw, ph = 10, 20 #player width and height
px, py = 50, 50 #inital player position
vx, vy = 5, 0 #velocity x and y
g = 0.5 #gravity
jmp = -10 #normal jumper power
double_jmp = -15 #stronger double jump power
jumping = False #Keeps track of wheather you're in the air
double_jump = False #Flag to track if the player has used double jump
jump_pressed = False #Track whether the jump key has been pressed
hit_pressed = False #Keep track if the bat has been swung
hitCounter = 0 #Keeps the hit collision and animation on for a few seconds

#load player animation frames
walk1 = pygame.image.load('Walk 1.png')
walk2 = pygame.image.load('Walk 2.png')
hit_image = pygame.image.load('hit.png')

#Animation variables
current_frame = 0 #Start with the first frame
animation_speed = 0.1 #contols how fast the animation changes
frame_timer = 0 #Timer to track when to switch frames

platforms = [] #list to hold all platforms
balls = []


#Platform Collision---------------------------------------------------------------
def check_collision(player_x, player_y, player_w, player_h, platforms):
    for Platform in platforms:
        #Check if player's bottom is at or just above the platform and horizontally aligned
        if (player_y + player_h <= platform.y and #player above the platform
            player_y + player_h + vy >= platform.y and #player falling onto the platform
            player_x >= player_w >= platform.x and #Player's right side is to the right of the platform left edge
            player_x <= platform.x + platform.width): #Player's left side is to the left of the platform's right edge
            return platform #Retrun the platform the player is colliding with
        return None #No collision
    
    
#Ball Collision----------------------------------------------------------------------
def check_ball_collision(player_x, player_y, ball):
    
        #Calculate the distance between the player and the ball
        distance = math.sqrt((Ball.x - player_x) ** 2 + (Ball.y - player_y) ** 2)
    
        if distance < 3:
            return True #Collision detected
        return False #No Collision   





while True: #Game loop-------------------------------------------------------------
    clock.tick(60)
    
    #Event handling section/input
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            
    keys = pygame.key.get_pressed()
    
    #physics section/update
    

        
    
#platform stuff----------------------------------------------------------------------
    #platform creation and destruction
    if random.randint(1, 100) <= 7: #Random chance to create a new platform
        platforms.append(Platform())
        print("apeending platform!")
        
    #remove platforms that have moved off screen
    for platform in platforms:
        if platform.x + platform.width < 50: #check if the platform is off the screen
            platforms.remove(platform) #fun fact: if this was C++, we'd need to use a destructor
            
    for platform in platforms:
        platform.update()
    
#ball stuff-----------------------
    print("flag1")
    if random.randint(1, 100) <= 7: #Random chance to create a new platform
        balls.append(Ball())
        print("apeending Ball!")
    
    print("flag2")
    #remove platforms that have moved off screen
    for Ball in balls:
        if Ball.x + Ball.width < 50: #check if the platform is off the screen
            ball.remove(Ball) #fun fact: if this was C++, we'd need to use a destructor
            
    for Ball in balls:
        Ball.update()
        
    for Ball in balls:
        if check_ball_collision(px, py, balls): #Check if player and ball collide
            if hit_pressed: #Only reflect the ball if the bat has been swung
                Ball.speed = -Ball.speed #Reverse the ball's direction (reflect it)
                print("Ball reflected!")
#player stuff-------------------------------------------------------------------------
    #player movement
    if keys[pygame.K_LEFT]:
        px -= vx
    elif keys[pygame.K_RIGHT]:
        px += vx
    
        
    
    if keys[pygame.K_z]:
        hit_pressed = True
        hitCounter = 0
        
    hitCounter+=1
    if hitCounter>20: #Keep animation and collision open for 20 game loops (adjust if needed)
        hit_pressed = False
        
    #Jumping logic
    if keys[pygame.K_UP]:
   
        if not jump_pressed:
            if not jumping:
                vy = jmp
                jumping = True
                
            elif not double_jump:
                vy = double_jmp #use stronger double jump power
                double_jump = True
            jump_pressed = True
    else:
        jump_pressed = False #Reset the jump pressed flag when the key is released 
        
    #Apply gravity
    #vy += g
    py += vy
    
    #Check if the player is on the ground
    if py >= 600 - ph:
        py = 600 - ph
        jumping = False
        vy = 0
        
        
        #Check for collision with platforms
    platform_collided = check_collision(px, py, pw, ph, platforms)
    if platform_collided:
        py = platform_collided.y - ph #place player on top of the platform
        vy = 0 #stop falling
        jumping = False #Allow the player to jump again
        double_jump = False #Reset the double jump ability
    else:
        #Apply gravity
        vy += g
        py += vy
        
        
    #Check if the player is on the ground
    if py >= 600 - ph:
        py = 600 - ph
        jumping = False
        double_jump = False #Reset the double jump when touching the groud
        vy = 0

    
    #Animation logic
    frame_timer += animation_speed
    if frame_timer >= 1:
        frame_timer = 0
        current_frame = (current_frame + 1) % 2 #switch between frame 0 and 1
        
    #choose the correct frame
    if current_frame == 0:
        current_image = walk1
    else:
        current_image = walk2
        
    #Render section------------------------------------------------------------------
    screen.fill(DARK)
    
    #pygame.draw.rect(screen, BLUE, (px, py, pw, ph)) #Draw the player
    
    
    #Draw the player with the correct aniamtion frame
    if hit_pressed: #show the bat swing animation
        screen.blit(hit_image, (px, py))
    else: #Default to normal walking animation
        if current_frame == 0:
            screen.blit(walk1, (px, py))
        else:
            screen.blit(walk2, (px, py))
    
    for platform in platforms:
        platform.draw(screen)
    
    pygame.display.flip() #Update the display

#end of game loop------------------------------------------------------------------
    
    
